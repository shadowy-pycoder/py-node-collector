# Makefile for python interface for package collector.
# File is generated by gopy. Do not edit.
# gopy build --output=py_node_collector -vm=python3.12 .

GOCMD=go
GOBUILD=$(GOCMD) build -mod=mod
GOIMPORTS=goimports
PYTHON=/home/mugorelov/workspace/github.com/shadowy-pycoder/py-node-collector/venv/bin/python3.12
LIBEXT=.so

# get the CC and flags used to build python:
GCC = $(shell $(GOCMD) env CC)
CFLAGS = "-I/usr/include/python3.12"
LDFLAGS = "-L/usr/lib/x86_64-linux-gnu" "-lpython3.12" -ldl -lm

all: gen build

gen:
	gopy gen -no-make --vm=python3.12 .

build:
	# build target builds the generated files -- this is what gopy build does..
	# this will otherwise be built during go build and may be out of date
	- rm collector.c
	# goimports is needed to ensure that the imports list is valid
	$(GOIMPORTS) -w collector.go
	# generate collector_go$(LIBEXT) from collector.go -- the cgo wrappers to go functions
	$(GOBUILD) -buildmode=c-shared -o collector_go$(LIBEXT) collector.go
	# use pybindgen to build the collector.c file which are the CPython wrappers to cgo wrappers..
	# note: pip install pybindgen to get pybindgen if this fails
	$(PYTHON) build.py
	# build the _collector$(LIBEXT) library that contains the cgo and CPython wrappers
	# generated collector.py python wrapper imports this c-code package
	
	$(GCC) collector.c  collector_go$(LIBEXT) -o _collector$(LIBEXT) $(CFLAGS) $(LDFLAGS) -fPIC --shared -w
	


