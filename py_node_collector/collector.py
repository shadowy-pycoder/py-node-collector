
# python wrapper for package github.com/shadowy-pycoder/py-node-collector/collector within overall package collector
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy build --output=py_node_collector -vm=python3.12 .

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _collector
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from collector import collector
# and then refer to everything using collector. prefix
# packages imported by this package listed below:




# ---- Types ---


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---

# Python type for interface collector.Collector
class Collector(go.GoClass):
	"""Collector is the interface a collector has to implement.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_collector.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_collector.IncRef(self.handle)
		else:
			self.handle = 0


# ---- Structs ---

# Python type for struct collector.NodeCollector
class NodeCollector(go.GoClass):
	"""NodeCollector implements the prometheus.Collector interface.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_collector.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_collector.IncRef(self.handle)
		else:
			self.handle = _collector.collector_NodeCollector_CTor()
			_collector.IncRef(self.handle)
	def __del__(self):
		_collector.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'collector.NodeCollector{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'collector.NodeCollector ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---


# ---- Functions ---
def Collect():
	"""Collect() str"""
	return _collector.collector_Collect()


